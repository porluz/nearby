# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  create-coverage-report:
    docker:
      - image: cimg/node:16.19.0
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: "Run tests and create coverage html report"
          command: |
            npm run test:coverage
      - run:
          name: "Update PR with the coverage report"
          command: |
            # Get the PR number
            PR_NUMBER="${CIRCLE_PULL_REQUEST##*/}"

            # Store the api endpoint for the PR
            PR_API_ENDPOINT=https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER
            echo "PR API ENDPOINT: $PR_API_ENDPOINT"

            # Store the link to the coverage report artifact
            ARTIFACT_URL=https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/coverage/lcov-report/index.html
            echo "ARTIFACT URL: $ARTIFACT_URL"

            # Setup the hidden comment and new comment
            HIDDEN_COMMENT_START="<!-- Jest Coverage Comment:Begin -->"
            HIDDEN_COMMENT_END="<!-- Jest Coverage Comment:End -->"
            HIDDEN_COMMENT="$HIDDEN_COMMENT_START $HIDDEN_COMMENT_END"
            NEW_COMMENT="<details><summary>Code coverage report</summary>Code coverage report is available <a href=\"$ARTIFACT_URL\">here</a>.</details>"

            # Get all comments for the PR
            COMMENTS=$(curl -H "Authorization: Bearer $GITHUB_TOKEN" "$PR_API_ENDPOINT/comments")

            # Find the existing comment with the hidden marker
            COMMENT_ID=$(echo "$COMMENTS" | jq -r --arg COMMENT "{{ HIDDEN_COMMENT_START }}" '.[] | select(.body | contains($COMMENT)) | .id')
            echo "Comment ID: $COMMENT_ID"

            # If the comment was found, update it; otherwise, create a new one
            if [ "$COMMENT_ID" != "" ]; then
              echo "Existing coverage comment found. Updating it..."
              API_URL="$PR_API_ENDPOINT/comments/$COMMENT_ID"
              curl_command="curl -X PATCH -H 'Authorization: Bearer $GITHUB_TOKEN' -d '{\"body\":\"$HIDDEN_COMMENT $NEW_COMMENT\"}' $API_URL"

              # Execute the curl command and store the HTTP response code
              response_code=$($curl_command -o /dev/null -w '%{http_code}')
            else
              echo "Creating a new coverage comment..."
              API_URL="$PR_API_ENDPOINT/comments"
              echo "New comment: $HIDDEN_COMMENT $NEW_COMMENT"
              json_body="$HIDDEN_COMMENT $NEW_COMMENT"
              echo '{}' | jq --arg body "$json_body" '. + {body: $body}' > temp.json
              json=$(cat temp.json)
              echo "JSON: $json"
              CURL_CMD="curl -w httpcode=%{http_code} -X POST 'Content-Type: application/json' -H 'Authorization: Bearer $GITHUB_TOKEN' -d @./temp.json "
              CURL_RETURN_CODE=0
              CURL_OUTPUT=`${CURL_CMD} $API_URL 2> /dev/null` || CURL_RETURN_CODE=$?
              # Execute the curl command and store the HTTP response code
              httpCode=$(echo "${CURL_OUTPUT}" | sed -e 's/.*\httpcode=//')
            fi

            echo "httpCode: $httpCode"
            if [ ${CURL_RETURN_CODE} -ne 0 ]; then  
              echo "Curl request failed with HTTP status code $response_code"
              exit 1  # Fail the CircleCI job
            else
              httpCode=$(echo "${CURL_OUTPUT}" | sed -e 's/.*\httpcode=//')
              if [[ "$httpCode" =~ ^2[0-9][0-9]$ ]]; then
                echo "Curl request was successful with HTTP status code $httpCode"
              fi
            fi
          when: on_success
      - store_artifacts:
          path: coverage

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  test-workflow:
    jobs:
      - say-hello
      - create-coverage-report
